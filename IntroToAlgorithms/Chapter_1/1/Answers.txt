1.1-1) Sorting - listing the items from a store based on the price
1.1-2) Memory used, complexity, implementation time.
1.1-3) Linked lists 
       Strengths - in-place insert and delete, good for big data sets (no need for contiguous memory segments) 
       Limitations - linear look-up
1.1-4) The problems are similar since they both attempt to find a path (the shortest one).
       They are different because the traveling-salesman problem also requires intermediate stops and a return route.
1.1-5) The best solution - calculating the trajectory of a space shuttle
       Approximately the best - calculating the amount of water required to water crops

1.2-1) Video games - rendering, graphics, physics
1.2-2) 64 * n * lgn < 8 * n * n
       64 * lgn < 8 * n
       8 * lgn < n
       assuming n > 1 , the answer is 44
1.2-3) 15

2.1-1) 
31 41 59 26 41 58  // compare 41 to 31, do nothing

31 41 59 26 41 58  // compare 59 to 41, do nothing

31 41 59 26 41 58  // compare 26 to 59, copy 59 to the right
31 41 59 59 41 58  // compare 26 to 41, copy 41 to the right
31 41 41 59 41 58  // compare 26 to 31, copy 31 to the right
31 31 41 59 41 58  // insert 26 at position 0
26 31 41 59 41 58

26 31 41 59 41 58  // compare 41 to 59, copy 59 to the right
26 31 41 59 59 58  // compare 41 to 41, insert 41 in the previous position of 59, 3
26 31 41 41 59 58

26 31 41 41 59 58  // compare 58 to 59, copy 58 to the right
26 31 41 41 59 59  // compare 58 to 41, insert 58 in the previous position of 59, 4
26 31 41 41 58 59  // complete

2.1-3)
LINEAR-SEARCH(A, v)
    for i = 0 to A.length - 1
        if A[i] == v
            return i
    return NIL

The loop invariant is the array A[0...i-1] having the property that it doesn't contain v.

Initialization: Before the loop, i is 0, the subarray is empty so it doesn't contain v
Maintenance: In the loop, if v is found, then the function returns, else the invariant becomes A[0...i] and doesn't contain v
Termination: The loop terminates either when v is found, or when i reaches n, meaning that v was not found.

2.1-4)
Input: Two sequences of n binary numbers (having values 0 or 1) A = <a1, a2,...,an> 
       and B = <b1, b2,...,bn> representing two integers.
Output: A sequence of n+1 binary numbers C = <c1, c2,...,cn+1> representing the sum of A and B, C = A + B.

BINARY-ADD(A, B, C)
    for j = 0 to C.length-1
        c[j] = 0
    
    for i = A.length-1 downto 0
        sum = A[i] + B[i] + C[i + 1]
        C[i + 1] = sum % 2
        C[i] = sum / 2 